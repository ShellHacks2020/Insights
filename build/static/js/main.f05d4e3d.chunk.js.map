{"version":3,"sources":["api.js","components/IconContainers.js","pages/Home.js","pages/Secret.js","pages/Login.js","pages/Signup.js","components/NavbarComponent.js","App.js","serviceWorker.js","index.js"],"names":["service","axios","create","baseURL","withCredentials","errHandler","err","console","error","response","data","message","localStorage","getItem","removeItem","get","then","res","catch","IconContainers","className","Home","Secret","useState","secret","setSecret","setMessage","useEffect","api","toString","Login","username","password","type","value","name","onChange","handleInputChange","onClick","e","handleClick","Signup","this","NavbarComponent","Navbar","bg","variant","Nav","to","exact","Form","inline","FormControl","placeholder","Button","path","component","render","App","props","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f05d4e3d.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst service = axios.create({\n  baseURL:\n    process.env.NODE_ENV === 'production'\n      ? '/api'\n      : 'http://localhost:5000/api',\n  withCredentials: true,\n})\n\nconst errHandler = err => {\n  console.error(err)\n  if (err.response && err.response.data) {\n    console.error('API response', err.response.data)\n    throw err.response.data.message\n  }\n  throw err\n}\n\nexport default {\n  service: service,\n\n  // This method is synchronous and returns true or false\n  // To know if the user is connected, we just check if we have a value for localStorage.getItem('user')\n  isLoggedIn() {\n    return localStorage.getItem('user') != null\n  },\n\n  // This method returns the user from the localStorage\n  // Be careful, the value is the one when the user logged in for the last time\n  getLocalStorageUser() {\n    return JSON.parse(localStorage.getItem('user'))\n  },\n\n  // This method signs up and logs in the user\n  signup(userInfo) {\n    return service\n      .post('/signup', userInfo)\n      .then(res => {\n        // If we have localStorage.getItem('user') saved, the application will consider we are loggedin\n        localStorage.setItem('user', JSON.stringify(res.data))\n        return res.data\n      })\n      .catch(errHandler)\n  },\n\n  login(username, password) {\n    return service\n      .post('/login', {\n        username,\n        password,\n      })\n      .then(res => {\n        // If we have localStorage.getItem('user') saved, the application will consider we are loggedin\n        localStorage.setItem('user', JSON.stringify(res.data))\n        return res.data\n      })\n      .catch(errHandler)\n  },\n\n  logout() {\n    localStorage.removeItem('user')\n    return service.get('/logout')\n  },\n\n  // This is an example on how to use this method in a different file\n  // api.getCountries().then(countries => { /* ... */ })\n  getCountries() {\n    return service\n      .get('/countries')\n      .then(res => res.data)\n      .catch(errHandler)\n  },\n\n  addCountry(body) {\n    return service\n      .post('/countries', body)\n      .then(res => res.data)\n      .catch(errHandler)\n  },\n\n  getSecret() {\n    return service\n      .get('/secret')\n      .then(res => res.data)\n      .catch(errHandler)\n  },\n\n  addPicture(file) {\n    const formData = new FormData()\n    formData.append('picture', file)\n    return service\n      .post('/endpoint/to/add/a/picture', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      })\n      .then(res => res.data)\n      .catch(errHandler)\n  },\n}\n","import React, { Fragment } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport '../css/IconContainers.css';\n\nfunction IconContainers() {\n  return (\n    <Fragment>\n      <div className='icons-ctn'>\n        <FontAwesomeIcon />\n      </div>\n    </Fragment>\n  );\n}\n\nexport default IconContainers;\n","import React, { Fragment } from 'react';\nimport IconContainers from '../components/IconContainers';\nimport '../css/Home.css';\n\nfunction Home() {\n  return (\n    <Fragment>\n      <div className='home'>\n        <div className='home-header'>#Insightout</div>\n        <div className='subheader'>\n          Find you favorite influencer. Grab data and go.\n        </div>\n        <div className='get-started-btn-ctn'>\n          <button className='get-started-btn'>\n            <div className='btn-message'>Get Started</div>\n          </button>\n        </div>\n      </div>\n      <IconContainers />\n    </Fragment>\n  );\n}\n\nexport default Home;\n","import React, { useState, useEffect } from 'react';\nimport api from '../api';\n\nfunction Secret() {\n  const [secret, setSecret] = useState(null);\n  const [message, setMessage] = useState(null);\n\n  useEffect(() => {\n    api\n      .getSecret()\n      .then(data => setSecret({ secret: data.secret }))\n      .catch(err => setMessage({ message: err.toString() }));\n  });\n\n  return (\n    <div className=\"Secret\">\n      <h2>Secret</h2>\n      <div className=\"result\">{secret}</div>\n      {message && <div className=\"info info-danger\">{message}</div>}\n    </div>\n  );\n}\n\nexport default Secret;\n","import React, { Fragment, useState } from 'react';\nimport api from '../api';\n\nfunction Login() {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [message, setMessage] = useState(null);\n  // this.handleInputChange = this.handleInputChange.bind(this);\n\n  const handleInputChange = (e) => {\n    console.log(\"input change\");\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const handleClick = (e) => {\n    e.preventDefault();\n    api\n      .login(username, password)\n      .then((result) => {\n        console.log('SUCCESS!');\n        this.props.history.push('/'); // Redirect to the home page\n      })\n      .catch((err) => this.setState({ message: err.toString() }));\n  };\n\n  return (\n    <Fragment>\n      <div className='Login'>\n        <h2>Login</h2>\n        <form>\n          Username:{' '}\n          <input\n            type='text'\n            value={username}\n            name='username'\n            onChange={() => this.handleInputChange}\n          />{' '}\n          <br />\n          Password:{' '}\n          <input\n            type='password'\n            value={password}\n            name='password'\n            onChange={() => this.handleInputChange}\n          />{' '}\n          <br />\n          <button onClick={(e) => this.handleClick(e)}>Login</button>\n        </form>\n        {message && <div className='info info-danger'>{message}</div>}\n      </div>\n    </Fragment>\n  );\n}\n\nexport default Login;\n","import React, { Fragment, useState } from 'react';\nimport api from '../api';\n\nfunction Signup() {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [name, setName] = useState('');\n  const [message, setMessage] = useState(null);\n\n  const handleInputChange = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const handleClick = (e) => {\n    e.preventDefault();\n    let data = {\n      username: this.state.username,\n      name: this.state.name,\n      password: this.state.password,\n    };\n    api\n      .signup(data)\n      .then((result) => {\n        console.log('SUCCESS!');\n        this.props.history.push('/'); // Redirect to the home page\n      })\n      .catch((err) => this.setState({ message: err.toString() }));\n  };\n  return (\n    <div className='Signup'>\n      <h2>Signup</h2>\n      <form>\n        Username:{' '}\n        <input\n          type='text'\n          value={username}\n          name='username'\n          onChange={this.handleInputChange}\n        />{' '}\n        <br />\n        Name:{' '}\n        <input\n          type='text'\n          value={name}\n          name='name'\n          onChange={this.handleInputChange}\n        />{' '}\n        <br />\n        Password:{' '}\n        <input\n          type='password'\n          value={password}\n          name='password'\n          onChange={this.handleInputChange}\n        />{' '}\n        <br />\n        <button onClick={(e) => this.handleClick(e)}>Signup</button>\n      </form>\n      {message && <div className='info info-danger'>{message}</div>}\n    </div>\n  );\n}\n\nexport default Signup;\n","import React, { Fragment, useState } from 'react';\nimport api from '../api';\nimport { Route, Link, NavLink, Switch, BrowserRouter } from 'react-router-dom';\nimport { Navbar, Nav, Form, FormControl, Button } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Home from '../pages/Home';\nimport Secret from '../pages/Secret';\nimport Login from '../pages/Login';\nimport Signup from '../pages/Signup';\n\nfunction NavbarComponent() {\n  function handleLogoutClick(e) {\n    api.logout();\n  }\n\n  return (\n    <Fragment>\n      <BrowserRouter>\n        <Navbar bg='light' variant='light'>\n          <Nav className='mr-auto'>\n            <NavLink to='/' exact>\n              Home\n            </NavLink>\n            {!api.isLoggedIn() && <NavLink to='/signup'>Signup</NavLink>}\n            {!api.isLoggedIn() && <NavLink to='/login'>Login</NavLink>}\n            {api.isLoggedIn() && (\n              <Link to='/' onClick={(e) => handleLogoutClick(e)}>\n                Logout\n              </Link>\n            )}\n            <NavLink to='/secret'>Secret</NavLink>\n          </Nav>\n          <Form inline>\n            <FormControl type='text' placeholder='Search' className='mr-sm-2' />\n            <Button variant='outline-primary'>Search</Button>\n          </Form>\n        </Navbar>\n        <Switch>\n          <Route path='/' exact component={Home} />\n          <Route path='/signup' component={Signup} />\n          <Route path='/login' component={Login} />\n          <Route path='/secret' component={Secret} />\n          <Route render={() => <h2>404</h2>} />\n        </Switch>\n      </BrowserRouter>\n    </Fragment>\n  );\n}\n\nexport default NavbarComponent;\n","import React from 'react';\nimport Navbar from './components/NavbarComponent';\n\nfunction App(props) {\n  return (\n    <div className='App'>\n      <header className='App-header'>\n        <Navbar />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}